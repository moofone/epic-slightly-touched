diff --git a/Cargo.lock b/Cargo.lock
index d964fa9..170a46d 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1,5 +1,7 @@
 # This file is automatically @generated by Cargo.
 # It is not intended for manual editing.
+version = 3
+
 [[package]]
 name = "addr2line"
 version = "0.15.2"
@@ -163,6 +165,12 @@ version = "0.13.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd"
 
+[[package]]
+name = "base64ct"
+version = "1.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "392c772b012d685a640cdad68a5a21f4a45e696f85a2c2c907aab2fe49a91e19"
+
 [[package]]
 name = "bigint"
 version = "4.4.3"
@@ -234,24 +242,23 @@ dependencies = [
 
 [[package]]
 name = "block-buffer"
-version = "0.3.3"
+version = "0.7.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a076c298b9ecdb530ed9d967e74a6027d6a7478924520acddcddc24c1c8ab3ab"
+checksum = "c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b"
 dependencies = [
- "arrayref",
- "byte-tools 0.2.0",
+ "block-padding",
+ "byte-tools",
+ "byteorder 1.4.3",
+ "generic-array 0.12.4",
 ]
 
 [[package]]
 name = "block-buffer"
-version = "0.7.3"
+version = "0.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b"
+checksum = "4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4"
 dependencies = [
- "block-padding",
- "byte-tools 0.3.1",
- "byteorder 1.4.3",
- "generic-array 0.12.4",
+ "generic-array 0.14.4",
 ]
 
 [[package]]
@@ -260,7 +267,7 @@ version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "fa79dedbb091f449f1f39e53edf88d5dbe95f895dae6135a8d7b881fb5af73f5"
 dependencies = [
- "byte-tools 0.3.1",
+ "byte-tools",
 ]
 
 [[package]]
@@ -290,12 +297,6 @@ version = "3.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "9c59e7af012c713f529e7a3ee57ce9b31ddd858d4b512923602f74608b009631"
 
-[[package]]
-name = "byte-tools"
-version = "0.2.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "560c32574a12a89ecd91f5e742165893f86e3ab98d21f8ea548658eb9eef5f40"
-
 [[package]]
 name = "byte-tools"
 version = "0.3.1"
@@ -495,6 +496,15 @@ version = "0.8.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ea221b5284a47e40033bf9b66f35f984ec0ea2931eb03505246cd27a963f981b"
 
+[[package]]
+name = "cpufeatures"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "95059428f66df56b63431fdb4e1947ed2190586af5c5a8a8b71122bdf5a7f469"
+dependencies = [
+ "libc",
+]
+
 [[package]]
 name = "crc32fast"
 version = "1.2.1"
@@ -607,12 +617,12 @@ checksum = "7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7"
 
 [[package]]
 name = "crypto-mac"
-version = "0.6.2"
+version = "0.11.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7afa06d05a046c7a47c3a849907ec303504608c927f4e85f7bfff22b7180d971"
+checksum = "b1d1a86f49236c215f271d40892d5fc950490551400b02ef360692c29815c714"
 dependencies = [
- "constant_time_eq",
- "generic-array 0.9.1",
+ "generic-array 0.14.4",
+ "subtle",
 ]
 
 [[package]]
@@ -757,20 +767,20 @@ checksum = "524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198"
 
 [[package]]
 name = "digest"
-version = "0.7.6"
+version = "0.8.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "03b072242a8cbaf9c145665af9d250c59af3b958f83ed6824e13533cf76d5b90"
+checksum = "f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5"
 dependencies = [
- "generic-array 0.9.1",
+ "generic-array 0.12.4",
 ]
 
 [[package]]
 name = "digest"
-version = "0.8.1"
+version = "0.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5"
+checksum = "d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066"
 dependencies = [
- "generic-array 0.12.4",
+ "generic-array 0.14.4",
 ]
 
 [[package]]
@@ -1059,7 +1069,7 @@ version = "3.0.0"
 dependencies = [
  "blake2-rfc",
  "byteorder 1.4.3",
- "digest 0.7.6",
+ "digest 0.9.0",
  "epic_util",
  "hmac",
  "lazy_static",
@@ -1070,7 +1080,7 @@ dependencies = [
  "serde",
  "serde_derive",
  "serde_json",
- "sha2 0.7.1",
+ "sha2 0.9.8",
  "uuid 0.6.5",
  "zeroize",
 ]
@@ -1343,20 +1353,21 @@ checksum = "8f5f3913fa0bfe7ee1fd8248b6b9f42a5af4b9d65ec2dd2c3c26132b950ecfc2"
 
 [[package]]
 name = "generic-array"
-version = "0.9.1"
+version = "0.12.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6d00328cedcac5e81c683e5620ca6a30756fc23027ebf9bff405c0e8da1fbb7e"
+checksum = "ffdf9f34f1447443d37393cc6c2b8313aebddcd96906caf34e54c68d8e57d7bd"
 dependencies = [
  "typenum",
 ]
 
 [[package]]
 name = "generic-array"
-version = "0.12.4"
+version = "0.14.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ffdf9f34f1447443d37393cc6c2b8313aebddcd96906caf34e54c68d8e57d7bd"
+checksum = "501466ecc8a30d1d3b7fc9229b122b2ce8ed6e9d9223f1138d4babb253e51817"
 dependencies = [
  "typenum",
+ "version_check",
 ]
 
 [[package]]
@@ -1506,12 +1517,12 @@ dependencies = [
 
 [[package]]
 name = "hmac"
-version = "0.6.3"
+version = "0.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "733e1b3ac906631ca01ebb577e9bb0f5e37a454032b9036b5eaea4013ed6f99a"
+checksum = "2a2a2320eb7ec0ebe8da8f744d7812d9fc4cb4d09344ac01898dbcb6a20ae69b"
 dependencies = [
  "crypto-mac",
- "digest 0.7.6",
+ "digest 0.9.0",
 ]
 
 [[package]]
@@ -1806,9 +1817,9 @@ checksum = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"
 
 [[package]]
 name = "libc"
-version = "0.2.97"
+version = "0.2.106"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "12b8adadd720df158f4d70dfe7ccc6adb0472d7c55ca83445f6a5ab3e36f8fb6"
+checksum = "a60553f9a9e039a333b4e9b20573b9e9b9c0bb3a11e201ccc48ef4283456d673"
 
 [[package]]
 name = "libgit2-sys"
@@ -2353,6 +2364,12 @@ version = "0.2.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c"
 
+[[package]]
+name = "opaque-debug"
+version = "0.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5"
+
 [[package]]
 name = "openssl"
 version = "0.10.35"
@@ -2503,6 +2520,17 @@ dependencies = [
  "winapi 0.3.9",
 ]
 
+[[package]]
+name = "password-hash"
+version = "0.2.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "77e0b28ace46c5a396546bcf443bf422b57049617433d8854227352a4a9b24e7"
+dependencies = [
+ "base64ct",
+ "rand_core 0.6.3",
+ "subtle",
+]
+
 [[package]]
 name = "pathdiff"
 version = "0.1.0"
@@ -2511,18 +2539,15 @@ checksum = "a3bf70094d203e07844da868b634207e71bfab254fe713171fae9a6e751ccf31"
 
 [[package]]
 name = "pbkdf2"
-version = "0.2.3"
+version = "0.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0c09cddfbfc98de7f76931acf44460972edb4023eb14d0c6d4018800e552d8e0"
+checksum = "d95f5254224e617595d2cc3cc73ff0a5eaf2637519e25f03388154e9378b6ffa"
 dependencies = [
- "base64 0.9.3",
- "byteorder 1.4.3",
- "constant_time_eq",
+ "base64ct",
  "crypto-mac",
- "generic-array 0.9.1",
  "hmac",
- "rand 0.5.6",
- "sha2 0.7.1",
+ "password-hash",
+ "sha2 0.9.8",
 ]
 
 [[package]]
@@ -3088,13 +3113,13 @@ dependencies = [
 
 [[package]]
 name = "ripemd160"
-version = "0.7.0"
+version = "0.9.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "482aa56cc68aaeccdaaff1cc5a72c247da8bbad3beb174ca5741f274c22883fb"
+checksum = "2eca4ecc81b7f313189bf73ce724400a07da2a6dac19588b03c8bd76a2dcc251"
 dependencies = [
- "block-buffer 0.3.3",
- "byte-tools 0.2.0",
- "digest 0.7.6",
+ "block-buffer 0.9.0",
+ "digest 0.9.0",
+ "opaque-debug 0.3.0",
 ]
 
 [[package]]
@@ -3314,26 +3339,27 @@ dependencies = [
 
 [[package]]
 name = "sha2"
-version = "0.7.1"
+version = "0.8.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9eb6be24e4c23a84d7184280d2722f7f2731fcdd4a9d886efbfe4413e4847ea0"
+checksum = "a256f46ea78a0c0d9ff00077504903ac881a1dafdc20da66545699e7776b3e69"
 dependencies = [
- "block-buffer 0.3.3",
- "byte-tools 0.2.0",
- "digest 0.7.6",
+ "block-buffer 0.7.3",
+ "digest 0.8.1",
  "fake-simd",
+ "opaque-debug 0.2.3",
 ]
 
 [[package]]
 name = "sha2"
-version = "0.8.2"
+version = "0.9.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a256f46ea78a0c0d9ff00077504903ac881a1dafdc20da66545699e7776b3e69"
+checksum = "b69f9a4c9740d74c5baa3fd2e547f9525fa8088a8a958e0ca2409a514e33f5fa"
 dependencies = [
- "block-buffer 0.7.3",
- "digest 0.8.1",
- "fake-simd",
- "opaque-debug",
+ "block-buffer 0.9.0",
+ "cfg-if 1.0.0",
+ "cpufeatures",
+ "digest 0.9.0",
+ "opaque-debug 0.3.0",
 ]
 
 [[package]]
@@ -3420,6 +3446,12 @@ version = "0.10.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623"
 
+[[package]]
+name = "subtle"
+version = "2.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6bdef32e8150c2a081110b42772ffe7d7c9032b606bc226c8260fd97e0976601"
+
 [[package]]
 name = "supercow"
 version = "0.1.0"
diff --git a/chain/src/chain.rs b/chain/src/chain.rs
index 63d1b06..746a6c8 100644
--- a/chain/src/chain.rs
+++ b/chain/src/chain.rs
@@ -645,6 +645,8 @@ impl Chain {
 				ext.extension.merkle_proof(output, batch)
 			})?;
 
+			println!("DEBUG3 BlockHeader {:?}", header);
+
 		Ok(merkle_proof)
 	}
 
diff --git a/chain/src/pipe.rs b/chain/src/pipe.rs
index 809aaad..1d4d623 100644
--- a/chain/src/pipe.rs
+++ b/chain/src/pipe.rs
@@ -332,6 +332,9 @@ fn seed_header_store(seed: &[u8; 32], batch: &mut store::Batch<'_>) -> Result<Bl
 /// to make it as cheap as possible. The different validations are also
 /// arranged by order of cost to have as little DoS surface as possible.
 fn validate_header(header: &BlockHeader, ctx: &mut BlockContext<'_>) -> Result<(), Error> {
+	warn!("DEBUG4 validate_header BlockHeader {:?}", header);
+	println!("DEBUG4 validate_header BlockHeader {:?}", header);
+
 	// check version, enforces scheduled hard fork
 	if !consensus::valid_header_version(header.height, header.version) {
 		error!(
diff --git a/core/src/core/block.rs b/core/src/core/block.rs
index cb2acc4..811cb60 100644
--- a/core/src/core/block.rs
+++ b/core/src/core/block.rs
@@ -170,7 +170,6 @@ impl Writeable for HeaderEntry {
 	}
 }
 
-
 impl Hashed for HeaderEntry {
 	/// The hash of the underlying block.
 	fn hash(&self) -> Hash {
@@ -315,10 +314,22 @@ fn read_block_header(reader: &mut dyn Reader) -> Result<BlockHeader, ser::Error>
 	let kernel_root = Hash::read(reader)?;
 	let total_kernel_offset = BlindingFactor::read(reader)?;
 	let (output_mmr_size, kernel_mmr_size) = ser_multiread!(reader, read_u64, read_u64);
+	let t = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(timestamp, 0), Utc);
+
+	// println!("\n\nread_block_header()\nversion: {:?}\nheight {:?}\ntimestamp {:?}\nprev_hash {:?}\noutput_root {:?}\nrange_proof_root {:?}\nkernel_root {:?}\ntotal_kernel_offset {:?}\noutput_mmr_size {:?}\nkernel_mmr_size {:?}",
+	// version, height, t, prev_hash, output_root, range_proof_root, kernel_root, total_kernel_offset, output_mmr_size, kernel_mmr_size);
 	let pow = ProofOfWork::read(reader)?;
+	// println!("POW: {:?}", pow);
 	let policy = reader.read_u8()?;
+	// println!("policy: {:?}", policy);
+
 	let bottles = Policy::read(reader)?;
+	// println!("bottles: {:?}", bottles);
 
+	let t = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(timestamp, 0), Utc);
+
+	// println!("\n\nread_block_header2()\nversion: {:?}\nheight {:?}\ntimestamp {:?}\nprev_hash {:?}\noutput_root {:?}\nrange_proof_root {:?}\nkernel_root {:?}\ntotal_kernel_offset {:?}\noutput_mmr_size {:?}\nkernel_mmr_size {:?}\npow: {:?}\npolicy: {:?}\nbottles: {:?}",
+	// version, height, t, prev_hash, output_root, range_proof_root, kernel_root, total_kernel_offset, output_mmr_size, kernel_mmr_size, pow, policy, bottles);
 	if timestamp > MAX_DATE.and_hms(0, 0, 0).timestamp()
 		|| timestamp < MIN_DATE.and_hms(0, 0, 0).timestamp()
 	{
@@ -541,6 +552,7 @@ impl Readable for Block {
 		let header = BlockHeader::read(reader)?;
 		let body = TransactionBody::read(reader)?;
 
+		println!("DEBUG BlockHeader {:?}", header);
 		Ok(Block { header, body })
 	}
 }
@@ -853,10 +865,7 @@ impl Block {
 	/// Validates all the elements in a block that can be checked without
 	/// additional data. Includes commitment sums and kernels, Merkle
 	/// trees, reward, etc.
-	pub fn validate(
-		&self,
-		prev_kernel_offset: &BlindingFactor,
-	) -> Result<Commitment, Error> {
+	pub fn validate(&self, prev_kernel_offset: &BlindingFactor) -> Result<Commitment, Error> {
 		self.body.validate(Weighting::AsBlock)?;
 
 		self.verify_kernel_lock_heights()?;
diff --git a/core/src/pow.rs b/core/src/pow.rs
index 7992b44..7ba563f 100644
--- a/core/src/pow.rs
+++ b/core/src/pow.rs
@@ -81,7 +81,7 @@ pub fn verify_size(bh: &BlockHeader) -> Result<(), Error> {
 	} else {
 		ctx.set_header_nonce(bh.pre_pow(), Some(bh.pow.nonce), Some(bh.height), false)?;
 	}
-
+	println!("bh.pow.proof: {:?}", bh.pow.proof);
 	ctx.verify(&bh.pow.proof)
 }
 
diff --git a/core/src/pow/randomx.rs b/core/src/pow/randomx.rs
index b7cf181..f61b64d 100644
--- a/core/src/pow/randomx.rs
+++ b/core/src/pow/randomx.rs
@@ -110,8 +110,10 @@ where
 			let mut state = RX_STATE.write();
 			slow_hash(&mut state, &self.header, &self.seed)
 		};
-
+		println!("Verify hash: {:?}, seed {:?}", hash, &self.seed);
 		let hash_u8: [u8; 32] = hash.into();
+		println!("Verify hash_u8: {:?}", hash_u8);
+		println!("Verify proof: {:?}", proof);
 
 		if let Proof::RandomXProof { hash: ref proof } = proof {
 			if &hash_u8 == proof {
diff --git a/core/src/pow/types.rs b/core/src/pow/types.rs
index 2518d59..9a622bd 100644
--- a/core/src/pow/types.rs
+++ b/core/src/pow/types.rs
@@ -409,6 +409,7 @@ pub struct ProofOfWork {
 impl Default for ProofOfWork {
 	fn default() -> ProofOfWork {
 		let proof_size = global::proofsize();
+		// println!("DEBUG proof_size {:?}", proof_size);
 		ProofOfWork {
 			total_difficulty: Difficulty::from_num(1),
 			secondary_scaling: 1,
@@ -433,14 +434,20 @@ impl Writeable for ProofOfWork {
 impl Readable for ProofOfWork {
 	fn read(reader: &mut dyn Reader) -> Result<ProofOfWork, ser::Error> {
 		let total_difficulty = Difficulty::read(reader)?;
+		// println!("Total Diff: {:?}", total_difficulty);
 		let secondary_scaling = reader.read_u32()?;
+		// println!("secondary_scaling: {:?}", secondary_scaling);
 
 		let nonce = reader.read_u64()?;
+		// println!("nonce: {:?}", nonce);
+
 		let proof = Proof::read(reader)?;
+		// println!("proof: {:?}", proof);
 
 		let seed_bytes = reader.read_fixed_bytes(32)?;
 		let seed: [u8; 32] = from_slice(&seed_bytes);
 
+		// println!("seed: {:?}", seed);
 		Ok(ProofOfWork {
 			total_difficulty,
 			secondary_scaling,
@@ -648,10 +655,12 @@ impl Proof {
 impl Readable for Proof {
 	fn read(reader: &mut dyn Reader) -> Result<Proof, ser::Error> {
 		let pow_type = reader.read_u8()?;
+		// println!("pow type: {}", pow_type);
 		match pow_type {
 			0 => {
 				let edge_bits = reader.read_u8()?;
 				if edge_bits == 0 || edge_bits > 64 {
+					println!("corrupted pow type 0 , edge bits: {:?}", edge_bits);
 					return Err(ser::Error::CorruptedData);
 				}
 
@@ -678,6 +687,8 @@ impl Readable for Proof {
 				// still better to enforce to avoid any malleability
 				for n in bits_len..(bytes_len * 8) {
 					if bitvec.bit_at(n) {
+						println!("corrupted pow type 0 lower");
+
 						return Err(ser::Error::CorruptedData);
 					}
 				}
diff --git a/keychain/Cargo.toml b/keychain/Cargo.toml
index d7b172d..be9bf34 100755
--- a/keychain/Cargo.toml
+++ b/keychain/Cargo.toml
@@ -21,10 +21,10 @@ uuid = { version = "0.6", features = ["serde", "v4"] }
 lazy_static = "1"
 zeroize = "1.3.0"
 
-digest = "0.7"
-hmac = "0.6"
-ripemd160 = "0.7"
-sha2 = "0.7"
-pbkdf2 = "0.2"
+digest = "0.9"
+hmac = "0.11"
+ripemd160 = "0.9"
+sha2 = "0.9"
+pbkdf2 = "0.8"
 
 epic_util = { path = "../util", version = "3.0.0" }
diff --git a/keychain/src/base58.rs b/keychain/src/base58.rs
index 1c0b0f1..9e8afec 100644
--- a/keychain/src/base58.rs
+++ b/keychain/src/base58.rs
@@ -38,11 +38,11 @@ use byteorder::{ByteOrder, LittleEndian};
 fn sha256d_hash(data: &[u8]) -> [u8; 32] {
 	let mut ret = [0; 32];
 	let mut sha2 = Sha256::new();
-	sha2.input(data);
-	ret.copy_from_slice(sha2.result().as_slice());
+	sha2.update(data);
+	ret.copy_from_slice(sha2.finalize().as_slice());
 	sha2 = Sha256::new();
-	sha2.input(&ret);
-	ret.copy_from_slice(sha2.result().as_slice());
+	sha2.update(&ret);
+	ret.copy_from_slice(sha2.finalize().as_slice());
 	ret
 }
 
diff --git a/keychain/src/extkey_bip32.rs b/keychain/src/extkey_bip32.rs
index 2233577..0a1831e 100644
--- a/keychain/src/extkey_bip32.rs
+++ b/keychain/src/extkey_bip32.rs
@@ -44,7 +44,7 @@ use byteorder::{BigEndian, ByteOrder, ReadBytesExt};
 
 use digest::generic_array::GenericArray;
 use digest::Digest;
-use hmac::{Hmac, Mac};
+use hmac::{Hmac, Mac, NewMac};
 use ripemd160::Ripemd160;
 use sha2::{Sha256, Sha512};
 
@@ -122,28 +122,28 @@ impl BIP32Hasher for BIP32GrinHasher {
 		b"IamVoldemort".to_owned()
 	}
 	fn init_sha512(&mut self, seed: &[u8]) {
-		self.hmac_sha512 = HmacSha512::new_varkey(seed).expect("HMAC can take key of any size");
+		self.hmac_sha512 = HmacSha512::new_from_slice(seed).expect("HMAC can take key of any size");
 	}
 	fn append_sha512(&mut self, value: &[u8]) {
-		self.hmac_sha512.input(value);
+		self.hmac_sha512.update(value);
 	}
 	fn result_sha512(&mut self) -> [u8; 64] {
 		let mut result = [0; 64];
-		result.copy_from_slice(self.hmac_sha512.result().code().as_slice());
+		result.copy_from_slice(self.hmac_sha512.clone().finalize().into_bytes().as_slice());
 		result
 	}
 	fn sha_256(&self, input: &[u8]) -> [u8; 32] {
 		let mut sha2_res = [0; 32];
 		let mut sha2 = Sha256::new();
-		sha2.input(input);
-		sha2_res.copy_from_slice(sha2.result().as_slice());
+		sha2.update(input);
+		sha2_res.copy_from_slice(sha2.finalize().as_slice());
 		sha2_res
 	}
 	fn ripemd_160(&self, input: &[u8]) -> [u8; 20] {
 		let mut ripemd_res = [0; 20];
 		let mut ripemd = Ripemd160::new();
-		ripemd.input(input);
-		ripemd_res.copy_from_slice(ripemd.result().as_slice());
+		ripemd.update(input);
+		ripemd_res.copy_from_slice(ripemd.finalize().as_slice());
 		ripemd_res
 	}
 }
@@ -685,7 +685,7 @@ mod tests {
 
 	use digest::generic_array::GenericArray;
 	use digest::Digest;
-	use hmac::{Hmac, Mac};
+	use hmac::{Hmac, Mac, NewMac};
 	use ripemd160::Ripemd160;
 	use sha2::{Sha256, Sha512};
 
@@ -716,28 +716,29 @@ mod tests {
 			b"Bitcoin seed".to_owned()
 		}
 		fn init_sha512(&mut self, seed: &[u8]) {
-			self.hmac_sha512 = HmacSha512::new_varkey(seed).expect("HMAC can take key of any size");
+			self.hmac_sha512 =
+				HmacSha512::new_from_slice(seed).expect("HMAC can take key of any size");
 		}
 		fn append_sha512(&mut self, value: &[u8]) {
-			self.hmac_sha512.input(value);
+			self.hmac_sha512.update(value);
 		}
 		fn result_sha512(&mut self) -> [u8; 64] {
 			let mut result = [0; 64];
-			result.copy_from_slice(self.hmac_sha512.result().code().as_slice());
+			result.copy_from_slice(self.hmac_sha512.clone().finalize().into_bytes().as_slice());
 			result
 		}
 		fn sha_256(&self, input: &[u8]) -> [u8; 32] {
 			let mut sha2_res = [0; 32];
 			let mut sha2 = Sha256::new();
-			sha2.input(input);
-			sha2_res.copy_from_slice(sha2.result().as_slice());
+			sha2.update(input);
+			sha2_res.copy_from_slice(sha2.finalize().as_slice());
 			sha2_res
 		}
 		fn ripemd_160(&self, input: &[u8]) -> [u8; 20] {
 			let mut ripemd_res = [0; 20];
 			let mut ripemd = Ripemd160::new();
-			ripemd.input(input);
-			ripemd_res.copy_from_slice(ripemd.result().as_slice());
+			ripemd.update(input);
+			ripemd_res.copy_from_slice(ripemd.finalize().as_slice());
 			ripemd_res
 		}
 	}
diff --git a/keychain/src/mnemonic.rs b/keychain/src/mnemonic.rs
index 752907d..a1667e9 100644
--- a/keychain/src/mnemonic.rs
+++ b/keychain/src/mnemonic.rs
@@ -99,8 +99,8 @@ pub fn to_entropy(mnemonic: &str) -> Result<Vec<u8>, Error> {
 
 	let mut hash = [0; 32];
 	let mut sha2sum = Sha256::default();
-	sha2sum.input(&entropy.clone());
-	hash.copy_from_slice(sha2sum.result().as_slice());
+	sha2sum.update(&entropy.clone());
+	hash.copy_from_slice(sha2sum.finalize().as_slice());
 
 	let actual = (hash[0] >> (8 - checksum_bits)) & mask;
 
@@ -124,8 +124,8 @@ pub fn from_entropy(entropy: &Vec<u8>) -> Result<String, Error> {
 
 	let mut hash = [0; 32];
 	let mut sha2sum = Sha256::default();
-	sha2sum.input(&entropy.clone());
-	hash.copy_from_slice(sha2sum.result().as_slice());
+	sha2sum.update(entropy);
+	hash.copy_from_slice(sha2sum.finalize().as_slice());
 
 	let checksum = (hash[0] >> 8 - checksum_bits) & mask;
 
